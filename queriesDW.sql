--Q1--DETERMINE THE TOP 5 PRODUCTS IN DEC 2019 IN TERMS OF TOTAL SALES
SELECT * FROM 
(SELECT DP.PRODUCT_NAME, SUM(SF.TOTAL_SALE) TOTAL_SALES, RANK() OVER(ORDER BY SUM(SF.TOTAL_SALE) DESC) RANK
FROM DIM_PRODUCT DP, SALESFACT SF, DIM_TIME DT
WHERE DP.PRODUCT_ID = SF.PRODUCT_ID AND DT.TIME_ID = SF.TIME_ID AND DT.COL_MONTH = 12 
GROUP BY DP.PRODUCT_NAME
) 
WHERE RANK <= 5;

--Q2--DETERMINE WHICH STORE PRODUCED HIGHEST SALES IN THE WHOLE YEAR
SELECT * FROM
(SELECT DS.STORE_NAME, SUM(SF.TOTAL_SALE) TOTAL_SALES, RANK() OVER(ORDER BY SUM(SF.TOTAL_SALE) DESC) RANK
FROM DIM_STORE DS, SALESFACT SF, DIM_TIME DT
WHERE DS.STORE_ID = SF.STORE_ID AND SF.TIME_ID = DT.TIME_ID AND DT.COL_YEAR = 2019
GROUP BY DS.STORE_NAME)
WHERE RANK = 1;

--Q3--DETERMINE THE TOP3 PRODUCTS FOR A MONTH(DEC 2019), AND FOR THE 2 MONTHS BEFORE THAT, IN TERMS OF TOTAL SALES
ACCEPT MONTH_NUM NUM PROMPT 'Enter A Month Number(1-12):';
SELECT PRODUCT_NAME, TOTAL_SALES AS "SUM(TOTAL_SALES)", RANK FROM(
SELECT * FROM
(SELECT DP.PRODUCT_NAME, SUM(SF.TOTAL_SALE) TOTAL_SALES, RANK() OVER(ORDER BY SUM(SF.TOTAL_SALE) DESC) RANK 
FROM SALESFACT SF, DIM_PRODUCT DP, DIM_TIME DT
WHERE SF.PRODUCT_ID = DP.PRODUCT_ID AND SF.TIME_ID = DT.TIME_ID AND DT.COL_MONTH = '&MONTH_NUM'
GROUP BY DP.PRODUCT_NAME) WHERE ROWNUM <=3

UNION ALL

SELECT * FROM
(SELECT DP.PRODUCT_NAME, SUM(SF.TOTAL_SALE) TOTAL_SALES, RANK() OVER(ORDER BY SUM(SF.TOTAL_SALE) DESC) RANK 
FROM SALESFACT SF, DIM_PRODUCT DP, DIM_TIME DT 
WHERE SF.PRODUCT_ID = DP.PRODUCT_ID AND SF.TIME_ID = DT.TIME_ID AND DT.COL_MONTH = '&MONTH_NUM'-1 
GROUP BY DP.PRODUCT_NAME) WHERE ROWNUM <=3

UNION ALL

SELECT * FROM
(SELECT DP.PRODUCT_NAME, SUM(SF.TOTAL_SALE) TOTAL_SALES, RANK() OVER(ORDER BY SUM(SF.TOTAL_SALE) DESC) RANK 
FROM SALESFACT SF, DIM_PRODUCT DP, DIM_TIME DT 
WHERE SF.PRODUCT_ID = DP.PRODUCT_ID AND SF.TIME_ID = DT.TIME_ID AND DT.COL_MONTH = '&MONTH_NUM'-2 
GROUP BY DP.PRODUCT_NAME) WHERE ROWNUM <=3
);


--Q4--CREATE A MATERIALISED VIEW CALLED "STOREANALYSIS" THAT PRESENTS THE PRODUCT-WISE SALES ANALYSIS FOR EACH STORE. THE RESULES
--SHOULD BE ORDERED BY STORE_ID AND THEN PRODUCT_ID
DROP MATERIALIZED VIEW STOREANALYSIS;
CREATE MATERIALIZED VIEW STOREANALYSIS (STORE_ID, PRODUCT_ID, TOTAL_SALES) AS
SELECT STORE_ID, PRODUCT_ID, SUM(TOTAL_SALE) 
FROM SALESFACT 
GROUP BY STORE_ID, PRODUCT_ID
ORDER BY CAST(SUBSTR(STORE_ID, 3) AS INT), PRODUCT_ID;

SELECT STORE_ID STOREID, PRODUCT_ID PRODUCTID, TOTAL_SALES "SUM(STORE_TOTAL)" FROM STOREANALYSIS;


--Q5--THINK ABOUT WHAT INFORMATION CAN BE RETRIEVED FROM THE MATERIALISED VIEW CREATED IN Q4 USING ROLLUP OR CUBE CONCEPTS AND 
--PROVIDE SOME USEFUL INFORMATION OF YOUR CHOICE FOR MANAGEMENT
SELECT STORE_ID, PRODUCT_ID, SUM(TOTAL_SALES)
FROM STOREANALYSIS
GROUP BY ROLLUP(STORE_ID, PRODUCT_ID);

SELECT STORE_ID, PRODUCT_ID, SUM(TOTAL_SALES)
FROM STOREANALYSIS
GROUP BY CUBE(STORE_ID, PRODUCT_ID);




